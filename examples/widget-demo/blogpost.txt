# This is the draft of the blog post associated with this demo.
# after publishing the post, this file will be deleted.
# ------------------------------------------------------------------------------

Part 1:
    JavaScript Widget Development Best Practices (Part 1: Overview)
    http://o2js.com/2012/07/05/javascript-widgets-overview/

Part 2:
    JavaScript Widget Development Best Practices (Part 2: the Setup)
    http://o2js.com/2012/07/16/javascript-widgets-setup/

Part 3:

    First start with setting a very long expires header for our static API
    bootloader.

    Now let's first ensure that our static scripts has a long expires header
    (explain the reasons why)

    //index.js
        var ONE_YEAR = 31536000000;

        app.use(express.static(__dirname + '/static', {maxAge : ONE_YEAR}));

        http://www.mnot.net/cache_docs/
        http://www.checkupdown.com/status/E304.html
        http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html

        Accept  text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
        Accept-Encoding gzip, deflate
        Accept-Language en-us,en;q=0.5
        Cache-Control   max-age=0
        Connection  keep-alive
        Host    api.widget.www
        If-Modified-Since   Tue, 17 Jul 2012 16:40:09 GMT
        If-None-Match   "2810-1342543209000"
        User-Agent  Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:13.0) Gecko/20100101 Firefox/13.0.1


        Response Headersview source
        Accept-Ranges   bytes
        Cache-Control   public, max-age=31536000
        Connection  keep-alive
        Date    Tue, 17 Jul 2012 16:42:44 GMT
        Etag    "2810-1342543209000"
        Last-Modified   Tue, 17 Jul 2012 16:40:09 GMT
        X-Powered-By    Express

        304 Not Modified

caching tutorial for web authors:
http://www.mnot.net/cache_docs/

http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
http header field definitions

http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
status code definitions

http://www.stevesouders.com/blog/2012/05/22/self-updating-scripts/
204 No Content

304 not modified
http://www.checkupdown.com/status/E304.html


samples:
    ga.js has a 2 hour cache time
    Facebook's all.js has a 15 minute cache time
    Twitter's widgets.js has a 30 minute cache time

our widget should have a far future cache time (explain why.)

    Now let's implement cache validation:




    // TODO:
    //     async request to a beacon.js (will have nocache,must-revalidate
    //     cache control headers)



    {{implement cache validation}}
    {{test for edge cases: what if publisher includes scripts more than once
    what if there is no HEAD element, what if whatever...?}}

Part 4:

    {{ways to store and retrieve widget paremeters}}
    {{get widget state/model from the server
        corollary: create a communication channel.
            different sorts of channels.
    }}
    {{render widget}}

Part 5:

    {{handling sessions}}
    {{how to authenticate user}}
    {{third party cookies}}

Part 6:

    {{retrieving data from server, modifying it, persisting it to server}}
    {{modern ways of cross-domain cross-frame communication}}
    {{fallback methods}}

Part 7:
    {{Deployment and Minification}}
    {{Versioning}}


---- supporting text -------

- cross-domain messaging alternatives (klein bottle)
- (at any phase mention all approaches and use the simplest one)

http://www.stevesouders.com/blog/2012/05/22/self-updating-scripts/

caching issues:
A bootstrap script is defined as a 3rd party script with a hardwired URL that can’t be changed. We want to give these scripts long cache times so they don’t slow down the page, but we also want the cached version to get updated when there’s a change. There are two main problems to solve: notifying the browser when there’s an update, and replacing the cached bootstrap script with the new version.
via:

--- supporting text ---

first (ideal case)
    authenticate user,
    remember the user.

seamless iframes:
    http://benvinegar.github.com/seamless-talk/#/39
    for those who want consistent styling and a stricter control in a
    well-defined sandbox environment.

a node.js application that
1. asks for credentials of the user.
2. displays logged in gui
3. resdisplays the logged in gui after refresh
4. the gui will have name surname and details of the user and an editable
text area
5. the text will update after user tpyes stuff
6. refreshing will retrieve the updated text from server.


- ideal case: 3rd party cookies are enabled
- detect whether they are enabled
- if disabled
    use cross frame messaging api if supported
    otherwise use klein bottle.

    mention that these should be enough and cross frame messaging api appears
    to be more widely supported in the future.

    mention easyxdm as well.


my next blog post will be about JS widgets for external sites.


TODO: look at notational data links as well.


1. What is a JavaScript Widget

2. Typical Use Cases for JavaScript Widgets

3. Challenges


Minification

split into logical pieces,
use modules
-- give examples


do use namespaces --
-- give examples