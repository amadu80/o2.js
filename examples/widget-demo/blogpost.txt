# This is the draft of the blog post associated with this demo.
# after publishing the post, this file will be deleted.
# ------------------------------------------------------------------------------

Part 1:
    JavaScript Widget Development Best Practices (Part 1: Overview)
    http://o2js.com/2012/07/05/javascript-widgets-overview/

Part 2:
    JavaScript Widget Development Best Practices (Part 2: the Setup)
    http://o2js.com/2012/07/16/javascript-widgets-setup/

Part 3:
    JavaScript Widget Development Best Practices (Part 3: Cache Revalidation)
    http://o2js.com/2012/07/22/javascript-widgets-cache/

Part 4:
    JavaScript Widget Development Best Practices (Part 4: Cross-Domain Communication)
    http://o2js.com/2012/07/27/javascript-widgets-cross-frame/

Part 5:
    JavaScript Widget Development Best Practices (Part 5: Getting Your Hands Dirty)
    http://o2js.com/2012/07/28/javascript-widgets-user-interface/

Part 6:
    First some refactoring...


    {{handling sessions}}
    {{how to authenticate user}}
    {{third party cookies}}

Part 7:

    {{retrieving data from server, modifying it, persisting it to server}}

Part 8:
    {{Deployment and Minification}}
    {{Versioning}}


---- supporting text -------

- cross-domain messaging alternatives (klein bottle)
- (at any phase mention all approaches and use the simplest one)

http://www.stevesouders.com/blog/2012/05/22/self-updating-scripts/

caching issues:
A bootstrap script is defined as a 3rd party script with a hardwired URL that can’t be changed. We want to give these scripts long cache times so they don’t slow down the page, but we also want the cached version to get updated when there’s a change. There are two main problems to solve: notifying the browser when there’s an update, and replacing the cached bootstrap script with the new version.
via:

--- supporting text ---

first (ideal case)
    authenticate user,
    remember the user.

seamless iframes:
    http://benvinegar.github.com/seamless-talk/#/39
    for those who want consistent styling and a stricter control in a
    well-defined sandbox environment.

a node.js application that
1. asks for credentials of the user.
2. displays logged in gui
3. resdisplays the logged in gui after refresh
4. the gui will have name surname and details of the user and an editable
text area
5. the text will update after user tpyes stuff
6. refreshing will retrieve the updated text from server.


- ideal case: 3rd party cookies are enabled
- detect whether they are enabled
- if disabled
    use cross frame messaging api if supported
    otherwise use klein bottle.

    mention that these should be enough and cross frame messaging api appears
    to be more widely supported in the future.

    mention easyxdm as well.


my next blog post will be about JS widgets for external sites.


TODO: look at notational data links as well.


1. What is a JavaScript Widget

2. Typical Use Cases for JavaScript Widgets

3. Challenges


Minification

split into logical pieces,
use modules
-- give examples


do use namespaces --
-- give examples