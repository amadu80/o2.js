# This is the draft of the blog post associated with this demo.
# after publishing the post, this file will be deleted.
# ------------------------------------------------------------------------------

Part 1:
    JavaScript Widget Development Best Practices (Part 1: Overview)
    http://o2js.com/2012/07/05/javascript-widgets-overview/

Part 2:
    JavaScript Widget Development Best Practices (Part 2: the Setup)
    http://o2js.com/2012/07/16/javascript-widgets-setup/

Part 3:
    JavaScript Widget Development Best Practices (Part 3: Cache Revalidation)
    http://o2js.com/2012/07/22/javascript-widgets-cache/

Part 4:
    JavaScript Widget Development Best Practices (Part 4: Cross-Domain Communication)
    http://o2js.com/2012/07/27/javascript-widgets-cross-frame/

Part 5:
    In the former article we have seen different ways to send initialization
    parameters to our widget, and we have also listed several techniques on
    how to establish cross-domain communication between the publisher's site
    and the widget API server. In this article we will try to render the user
    interface of our widget.

    There are various ways to render a widget. The most common two are

    * to render the widget's UI by appending HTML before the widget's script
    tag.
    * to render the widget's UI by explicityl specifying a target location.

    The former technique involves traversing the publisher's DOM, locating the
    instance or instances of widget bootloader scripts, and injecting HTML before
    each script.

    While in the latter, we explicity specify placeholder HTML tags as an anchor
    position to render the widget.

    We'll continue our example with the second implementation, since it gives
    more flexibility, less prone to errors and race conditions (in the case
    of having more than one script on the page), requires less lines of code
    to implement, is a better demonstration of separation of concerns
    (script does what it should: initialization,
    and placeholder tags better represent their purpose: a place that the wiget
    bootloader (controller) will initialize the presentation (view) elements)


    Styling?

    - inline styles (won't conflict with publisher's styles)

    - loading CSS file.

    - embedding CSS in JavaScript

    look and feel?
    shall it look the same at every platform?
    shall it inherit some of the publisher's styles?
    to what extent?

    overspecify CSS
    overusing !important




    A simple login form:



    make this a jade template and test.

    then request and cache

    Since this is a demo app, we will implement only basic functionality and
    leave further improvements as an excercise to the reader.


    TODO:
    mention different ways to render the widget.
    one option is to decouple the render targets by making the publisher
    specify the render targets separately.
    This will enable us render multiple widgets with just a single bootloader
    script.



    {{get widget state/model from the server
        corollary: create a communication channel.
            different sorts of channels.
    }}
    {{render widget}}
    {{add some basic style information
        corollary: ways to include that style information.
        }}

Part 6:

    {{handling sessions}}
    {{how to authenticate user}}
    {{third party cookies}}

Part 7:

    {{retrieving data from server, modifying it, persisting it to server}}

Part 8:
    {{Deployment and Minification}}
    {{Versioning}}


---- supporting text -------

- cross-domain messaging alternatives (klein bottle)
- (at any phase mention all approaches and use the simplest one)

http://www.stevesouders.com/blog/2012/05/22/self-updating-scripts/

caching issues:
A bootstrap script is defined as a 3rd party script with a hardwired URL that can’t be changed. We want to give these scripts long cache times so they don’t slow down the page, but we also want the cached version to get updated when there’s a change. There are two main problems to solve: notifying the browser when there’s an update, and replacing the cached bootstrap script with the new version.
via:

--- supporting text ---

first (ideal case)
    authenticate user,
    remember the user.

seamless iframes:
    http://benvinegar.github.com/seamless-talk/#/39
    for those who want consistent styling and a stricter control in a
    well-defined sandbox environment.

a node.js application that
1. asks for credentials of the user.
2. displays logged in gui
3. resdisplays the logged in gui after refresh
4. the gui will have name surname and details of the user and an editable
text area
5. the text will update after user tpyes stuff
6. refreshing will retrieve the updated text from server.


- ideal case: 3rd party cookies are enabled
- detect whether they are enabled
- if disabled
    use cross frame messaging api if supported
    otherwise use klein bottle.

    mention that these should be enough and cross frame messaging api appears
    to be more widely supported in the future.

    mention easyxdm as well.


my next blog post will be about JS widgets for external sites.


TODO: look at notational data links as well.


1. What is a JavaScript Widget

2. Typical Use Cases for JavaScript Widgets

3. Challenges


Minification

split into logical pieces,
use modules
-- give examples


do use namespaces --
-- give examples